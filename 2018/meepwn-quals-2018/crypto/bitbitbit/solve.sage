# n = 20693300621338263534560609109464045006147969931992337541749057866556383710608500686158118153024636004958845212256080054190457498273079568214789249722382057244858110528880978984262396826483486960796447524091269709040411029186173343224863590933385009297165441741222704775965315685656770975060156899530339910612836598393780018347442836625375129069373628621335300662713593334102767865417395242014721478539931126725049820283224116587893415787160087455134250238256165719220929229370545070057138206724778933005907131637620954213217076383290502144222010195403974326327554803068193543309741224437746561252495013553800046721737
# t2 = 820
# t1 = 1024 - t2
# g = 1356576013631814339759105361141616188752282630425597137563229
n = 20658539604877761050678801630864553684691924015340818582033943215336021271241523207301526551031759877723763213858857256012005872876527086212782382747743153859999766070805468009813753774458866664853215343408723811758537141521678487298977376217773633027585619650112059070422617519641618778063814236955944784876563114191642188773348137035314128890851568057842806286204535449260513363513782304461785184302678061697273081648710987909148680238536802718340701848281749317987344911434878488284869227795792706075550534807516929611056284343386953830554473234182474405415175074734080283687254281084250177878324218977072329705463
t1 = 231
t2 = 1024-231
g = 748605525135410563041437379140027861196744884219358105597761914385566
'''
n = 17901835399384714624597700477671879960832586181181560200630486819367558375800091468911915201351094519477945043511900203562021349580937591306714890171776169479274874979355387938075238894673965058543972431577694255937621288018782731432725799599379702044321827805272175232071473056075462446651651237082130144011336011293263845084350522419401246413644950806428351784404952828872588408642557596057300468712070981946876585673659512796515099415644054497861256188872220952127219891562919799070122760975326414666914049018546169452665192104520566379942629165236994651363811487281781175381886916111946907913932424083088833387551
t2 = 911
t1 = 113
g = 3386816756986656655497580780424510
'''

m1 = 2^t1 - 1
m2 = 2^t2 - 1
P.<y> = Zmod(n)[]
n1 = n & m1
n2 = n & m2
var('x')

def s1(gi):
    print '@s1@', gi
    tmp = solve_mod([x*(x+g+gi)==n2], 2^t2)
    for i in tmp:
        ii = int(i[0])
        print '#s2#', ii
        f = y * (2^t2) + ii
        f1 = f.monic()
        res = f1.small_roots(X=2^t1,beta=0.3)
        if res:
            p = f(res[0])
            print 'find p?', p
            if n%int(p) == 0:
                return p
    return None

def s2(p1, q1):
    print '#s2#', p1, q1
    tmp = solve_mod([(x+p1)*(x+q1)==n2], 2^t2)
    for i in tmp:
        ii = int(i[0])
        if not hex(ii).strip('L').endswith('0000000000'):
            break
        print '$s3$', ii
        f = y * (2^t2) + ii + p1
        f1 = f.monic()
        res = f1.small_roots(X=2^t1,beta=0.3)
        if res:
            p = f(res[0])
            print 'find p?', p
            raw_input()
            if n%int(p) == 0:
                return p
    return None

# for i in xrange(-2400, -1600):
for i in xrange(-472, -471):
    test = s1(i)
    '''
    if not test:
        continue
    for q0 in test:
        # assert q0 == q&m1
        p0 = int((q0+g+i)%(2^t1))
        res = s2(p0, q0)
    '''
    if test:
        print 'hahaha', test
        raw_input()
